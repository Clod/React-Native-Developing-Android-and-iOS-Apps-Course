// src/store.js
import { configureStore, createSlice } from '@reduxjs/toolkit';
import quizQuestions from './quizQuestions'; // Fix the import

// Create a quiz slice
// A slice can be thought of as a "compartment" or a "section" of the store 
// that is responsible for managing a specific piece of the application's state.

// A slice typically includes:
//   Initial state: The starting state for that part of the store.
//   Reducers: Functions that handle how the state is updated in response to actions.
//   Actions: Functions that dispatch actions to trigger state changes.

const quizSlice = createSlice({
  name: 'quiz',
  initialState: {
    questions: quizQuestions,
    currentQuestionIndex: 0,
    score: 0,
  },
  reducers: {
    // Define a reducer function to handle the answerQuestion action
    // receives the option selected by the user as the payload
    // checks if the answer is correct and updates the score and currentQuestionIndex accordingly
    answerQuestion: (state, action) => {
      if (state.questions[state.currentQuestionIndex].answer === action.payload) {
        state.score += 1;
      }
      state.currentQuestionIndex += 1;
    },
    // Define a reducer function to handle the resetQuiz action
    // resets the currentQuestionIndex and score to their initial values
    resetQuiz: (state) => {
      state.currentQuestionIndex = 0;
      state.score = 0;
    },
  },
});

/*
These reducers automatically generate corresponding action creators:

answerQuestion(payload) → Creates an action with type: 'quiz/answerQuestion' and the provided payload.

resetQuiz() → Creates an action with type: 'quiz/resetQuiz'.
*/

// Export actions
export const { answerQuestion, resetQuiz } = quizSlice.actions;

/*
Actions are payloads of information that send data from your application to the Redux store. 
They are the only way to trigger changes to the state in Redux. An action is a plain JavaScript 
object that must have a type property (to describe what kind of change is being made) and can 
optionally include a payload (the data needed to make the change).
{
  type: 'quiz/answerQuestion',
  payload: 'Paris', // The selected answer
}
*/

// Create and export the store (setup the Redux store)
const store = configureStore({
  // Root reducer that combines all the slices of state into a single state object
  reducer: {
    // quizSlice.reducer is the reducer function generated by createSlice. 
    // It handles all the logic for updating the quiz slice of the state.
    quiz: quizSlice.reducer,
  },
});

export default store;
